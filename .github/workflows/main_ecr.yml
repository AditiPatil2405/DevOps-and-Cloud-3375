name: Build and Deploy to ECR and Kubernetes
'on':
  push:
    branches:
      - main
env:
  AWS_REGION: ca-central-1
  ECR_REGISTRY: 058264132523.dkr.ecr.ca-central-1.amazonaws.com/online-boutique
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          aws-region: '${{ env.AWS_REGION }}'
      - name: Login to Amazon ECR
        run: >-
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login
          --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
      - name: Check Docker image changes and push
        run: |
          services=(
            "emailservice"
            "productcatalogservice"
            "recommendationservice"
            "shippingservice"
            "checkoutservice"
            "paymentservice"
            "currencyservice"
            "cartservice"
            "frontend"
            "adservice"
            "loadgenerator"
          )
          for service in "${services[@]}"; do
            context="src/$service"
            # Special case for cartservice
            if [ "$service" == "cartservice" ]; then
              context="src/cartservice/src"
            fi

            # Build and tag the image
            docker build -t $service:latest $context
            new_digest=$(docker inspect --format='{{index .RepoDigests 0}}' $service:latest)

            # Retrieve existing digest from ECR, if it exists
            existing_digest=$(aws ecr describe-images --repository-name $service --image-ids imageTag=latest --region ${{ env.AWS_REGION }} --query 'images[0].imageDigest' --output text 2>/dev/null || echo "")

            # Compare digests and push if they are different or if the image doesn't exist in the repository
            if [ "$new_digest" != "$existing_digest" ]; then
              docker tag $service:latest ${{ env.ECR_REGISTRY }}:$service-latest
              docker push ${{ env.ECR_REGISTRY }}:$service-latest
            else
              echo "No changes detected for $service, skipping push to ECR."
            fi
          done
  deploy:
    need: build
    runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v3
        - name: Push Docker images to ECR
          run: echo "Images are already pushed in the 'build' job"
        - name: Execute Terraform
          uses: hashicorp/setup-terraform@v1
          with:
            terraform_version: 1.0.0
        - name: Run Terraform commands
          run: |
            terraform init
            terraform plan
            terraform apply --auto-approve
          working-directory: ./.github/workflows/test.tf
  test:
    needs: build
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v3
        - name: Run test script
          run: ./.github/workflows/test.sh
