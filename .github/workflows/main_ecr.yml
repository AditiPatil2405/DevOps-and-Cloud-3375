name: Build and Deploy to ECR and Kubernetes
'on':
  push:
    branches:
      - main
env:
  AWS_REGION: ca-central-1
  ECR_REGISTRY: 058264132523.dkr.ecr.ca-central-1.amazonaws.com/online-boutique
jobs:
  build:
  runs-on: ubuntu-latest
  steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
      
    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
        
    - name: Check Docker image changes and push
      run: |
        services=(
          "emailservice"
          "productcatalogservice"
          "recommendationservice"
          "shippingservice"
          "checkoutservice"
          "paymentservice"
          "currencyservice"
          "cartservice"
          "frontend"
          "adservice"
          "loadgenerator"
        )
        for service in "${services[@]}"; do
          context="src/$service"
          # Special case for cartservice
          if [ "$service" == "cartservice" ]; then
            context="src/cartservice/src"
          fi

          # Build the Docker image
          docker build -t $service:latest $context
          
          # Check if the image exists locally
          if docker inspect $service:latest &>/dev/null; then
            # Retrieve existing digest from ECR, if it exists
            existing_digest=$(aws ecr describe-images --repository-name $service --image-ids imageTag=latest --region ${{ env.AWS_REGION }} --query 'images[0].imageDigest' --output text 2>/dev/null || true)
  
            # Get new digest
            new_digest=$(docker inspect --format='{{index .RepoDigests 0}}' $service:latest)
  
            # Compare digests and push if they are different or if the image doesn't exist in the repository
            if [ "$new_digest" != "$existing_digest" ]; then
              docker tag $service:latest ${{ env.ECR_REGISTRY }}:$service-latest
              docker push ${{ env.ECR_REGISTRY }}:$service-latest
            else
              echo "No changes detected for $service, skipping push to ECR."
            fi
          else
            echo "Docker image $service:latest does not exist locally. Skipping push to ECR."
          fi
        done

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Push Docker images to ECR
        run: echo "Images are already pushed in the 'build' job"
      - name: Execute Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0
      - name: Terraform Init
        run: terraform init
      - name: Terraform Plan
        run: terraform plan
      - name: Terraform Apply
        run: terraform apply --auto-approve
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run test script
        run: chmod +x test.sh
