name: Build and Deploy to ECR and Kubernetes

on:
  push:
    branches:
      - main  # Adjust this to the branches where you want this workflow to run

env:
  AWS_REGION: ca-central-1  # Adjust this to your AWS region
  ECR_REGISTRY: 058264132523.dkr.ecr.ca-central-1.amazonaws.com/online-boutique  # Your ECR registry URI

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker images
        run: |
          services=(
            "emailservice"
            "productcatalogservice"
            "recommendationservice"
            "shippingservice"
            "checkoutservice"
            "paymentservice"
            "currencyservice"
            "cartservice"
            "frontend"
            "adservice"
            "loadgenerator"
          )
          for service in "${services[@]}"; do
            context="src/$service"
            # Special case for cartservice
            if [ "$service" == "cartservice" ]; then
              context="src/cartservice/src"
            fi

            docker build -t $service:latest $context
          done

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      - name: Push Docker images to ECR
        run: |
          services=(
            "emailservice"
            "productcatalogservice"
            "recommendationservice"
            "shippingservice"
            "checkoutservice"
            "paymentservice"
            "currencyservice"
            "cartservice"
            "frontend"
            "adservice"
            "loadgenerator"
          )
          for service in "${services[@]}"; do
            docker tag $service:latest ${{ env.ECR_REGISTRY }}:$service-latest
            docker push ${{ env.ECR_REGISTRY }}:$service-latest
          done
